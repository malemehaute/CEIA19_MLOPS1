#!/bin/bash

# ===============================================
# NUCLEAR PROJECT CLEANUP - Solo tu proyecto
# ===============================================
# Elimina TODO relacionado con este docker-compose.yaml
# pero mantiene otros proyectos Docker intactos
# ===============================================

# Obtener el nombre del proyecto (directorio actual)
PROJECT_NAME=$(basename "$(pwd)")
COMPOSE_FILE="docker-compose.yaml"

echo "üéØ =========================================="
echo "üéØ LIMPIEZA NUCLEAR DEL PROYECTO: $PROJECT_NAME"
echo "üéØ =========================================="
echo ""
echo "üî• Este script eliminar√° SOLO los recursos de este proyecto:"
echo "   ‚Ä¢ Contenedores: airflow_*, postgres, minio, mlflow, fastapi"
echo "   ‚Ä¢ Im√°genes: extending_airflow, postgres_system, mlflow, backend_fastapi"
echo "   ‚Ä¢ Vol√∫menes: ${PROJECT_NAME}_db_data, ${PROJECT_NAME}_minio_data"
echo "   ‚Ä¢ Redes: ${PROJECT_NAME}_frontend, ${PROJECT_NAME}_backend"
echo ""
echo "‚úÖ Se conservar√°n:"
echo "   ‚Ä¢ Otros proyectos Docker"
echo "   ‚Ä¢ Im√°genes base (python, postgres, minio/minio, etc.)"
echo "   ‚Ä¢ Tu c√≥digo fuente"
echo ""
echo -n "¬øContinuar? (y/N): "
read -r confirmation

if [[ ! "$confirmation" =~ ^[Yy]$ ]]; then
    echo "‚ùå Operaci√≥n cancelada."
    exit 0
fi

echo ""
echo "üî• Iniciando limpieza del proyecto $PROJECT_NAME..."
echo ""

# 1. Parar y eliminar servicios del docker compose
echo "üõë Deteniendo servicios del proyecto..."
if [ -f "$COMPOSE_FILE" ]; then
    docker compose --profile all down -v --remove-orphans 2>/dev/null || echo "   ‚ÑπÔ∏è  Algunos servicios ya estaban detenidos"
else
    echo "   ‚ö†Ô∏è  No se encontr√≥ $COMPOSE_FILE en el directorio actual"
fi

# 2. Eliminar contenedores espec√≠ficos del proyecto (por si quedan hu√©rfanos)
echo "üóëÔ∏è  Eliminando contenedores del proyecto..."
PROJECT_CONTAINERS=$(docker ps -aq --filter "name=airflow_" --filter "name=postgres" --filter "name=minio" --filter "name=mlflow" --filter "name=fastapi")
if [ -n "$PROJECT_CONTAINERS" ]; then
    echo "   Eliminando: $(echo $PROJECT_CONTAINERS | tr '\n' ' ')"
    docker rm -f $PROJECT_CONTAINERS 2>/dev/null || true
else
    echo "   ‚ÑπÔ∏è  No hay contenedores del proyecto que eliminar"
fi

# 3. Eliminar im√°genes espec√≠ficas del proyecto
echo "üñºÔ∏è  Eliminando im√°genes del proyecto..."
PROJECT_IMAGES="extending_airflow:latest postgres_system:latest mlflow:latest backend_fastapi:latest"
for image in $PROJECT_IMAGES; do
    if docker images --format "{{.Repository}}:{{.Tag}}" | grep -q "^$image$"; then
        echo "   Eliminando imagen: $image"
        docker rmi "$image" 2>/dev/null || echo "   ‚ö†Ô∏è  No se pudo eliminar $image (puede estar en uso)"
    else
        echo "   ‚ÑπÔ∏è  Imagen $image no encontrada"
    fi
done

# 4. Eliminar vol√∫menes espec√≠ficos del proyecto
echo "üì¶ Eliminando vol√∫menes del proyecto..."
PROJECT_VOLUMES="${PROJECT_NAME}_db_data ${PROJECT_NAME}_minio_data"
for volume in $PROJECT_VOLUMES; do
    if docker volume ls --format "{{.Name}}" | grep -q "^$volume$"; then
        echo "   Eliminando volumen: $volume"
        docker volume rm "$volume" 2>/dev/null || echo "   ‚ö†Ô∏è  No se pudo eliminar $volume"
    else
        echo "   ‚ÑπÔ∏è  Volumen $volume no encontrado"
    fi
done

# 5. Eliminar redes espec√≠ficas del proyecto
echo "üåê Eliminando redes del proyecto..."
PROJECT_NETWORKS="${PROJECT_NAME}_frontend ${PROJECT_NAME}_backend ${PROJECT_NAME}_default"
for network in $PROJECT_NETWORKS; do
    if docker network ls --format "{{.Name}}" | grep -q "^$network$"; then
        echo "   Eliminando red: $network"
        docker network rm "$network" 2>/dev/null || echo "   ‚ÑπÔ∏è  Red $network en uso o ya eliminada"
    else
        echo "   ‚ÑπÔ∏è  Red $network no encontrada"
    fi
done

# 6. Limpiar recursos no utilizados (solo los que no tienen referencias)
echo "üßπ Limpieza de recursos hu√©rfanos..."
docker system prune -f 2>/dev/null || true

echo ""
echo "‚úÖ ¬°LIMPIEZA DEL PROYECTO COMPLETADA!"
echo ""
echo "üìä Estado actual del proyecto:"
echo ""

# Verificar que todo se elimin√≥
echo "üîç Verificando contenedores del proyecto:"
REMAINING_CONTAINERS=$(docker ps -a --filter "name=airflow_" --filter "name=postgres" --filter "name=minio" --filter "name=mlflow" --filter "name=fastapi" --format "{{.Names}}")
if [ -n "$REMAINING_CONTAINERS" ]; then
    echo "   ‚ö†Ô∏è  Contenedores restantes: $REMAINING_CONTAINERS"
else
    echo "   ‚úÖ No hay contenedores del proyecto"
fi

echo ""
echo "üîç Verificando im√°genes del proyecto:"
REMAINING_IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep -E "(extending_airflow|postgres_system|mlflow|backend_fastapi)")
if [ -n "$REMAINING_IMAGES" ]; then
    echo "   ‚ö†Ô∏è  Im√°genes restantes:"
    echo "$REMAINING_IMAGES" | sed 's/^/      /'
else
    echo "   ‚úÖ No hay im√°genes del proyecto"
fi

echo ""
echo "üîç Verificando vol√∫menes del proyecto:"
REMAINING_VOLUMES=$(docker volume ls --format "{{.Name}}" | grep "$PROJECT_NAME")
if [ -n "$REMAINING_VOLUMES" ]; then
    echo "   ‚ö†Ô∏è  Vol√∫menes restantes: $REMAINING_VOLUMES"
else
    echo "   ‚úÖ No hay vol√∫menes del proyecto"
fi

echo ""
echo "üîÑ Para reconstruir el proyecto:"
echo "   docker compose --profile all up -d --build"
echo ""
echo "‚è±Ô∏è  La primera ejecuci√≥n ser√° m√°s lenta porque debe"
echo "   reconstruir las im√°genes personalizadas del proyecto."
